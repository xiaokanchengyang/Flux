name: Performance Benchmarks

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'flux-lib/**'
      - 'benches/**'
      - '.github/workflows/benchmark.yml'
  pull_request:
    types: [labeled]

jobs:
  benchmark:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || contains(github.event.label.name, 'benchmark')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.90.0
        override: true
        profile: minimal
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y p7zip-full
    
    - name: Run benchmarks
      run: |
        cd flux
        cargo bench --no-default-features -- --output-format bencher | tee output.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          flux/target/criterion/
          flux/output.txt
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const output = fs.readFileSync('flux/output.txt', 'utf8');
          
          const comment = `## Benchmark Results
          
          \`\`\`
          ${output}
          \`\`\`
          
          Full results available in the artifacts.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });