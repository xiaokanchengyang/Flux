name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get the version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Flux ${{ steps.get_version.outputs.version }}
          body: |
            # Flux ${{ steps.get_version.outputs.version }}
            
            ## Installation
            
            Download the appropriate archive for your platform and extract the `flux` binary.
            
            ### Quick Install (Linux/macOS)
            ```bash
            # Download and install (replace linux with darwin for macOS)
            curl -LO https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/flux-linux-amd64.tar.gz
            tar xzf flux-linux-amd64.tar.gz
            sudo mv flux /usr/local/bin/
            ```
            
            ### Verify Installation
            ```bash
            flux --version
            ```
            
            ## What's New
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
            
            ## Checksums
            
            SHA256 checksums will be added below once all artifacts are uploaded.
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: flux
            asset_name: flux-linux-amd64
            use_cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: flux
            asset_name: flux-linux-amd64-musl
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: flux
            asset_name: flux-linux-arm64
            use_cross: true
            
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: flux
            asset_name: flux-macos-amd64
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: flux
            asset_name: flux-macos-arm64
            use_cross: false
            
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: flux.exe
            asset_name: flux-windows-amd64
            use_cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build (native)
        if: '!matrix.use_cross'
        run: |
          cargo build --release --target ${{ matrix.target }} --package flux-cli

      - name: Build (cross)
        if: matrix.use_cross
        run: |
          cross build --release --target ${{ matrix.target }} --package flux-cli

      - name: Package Binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Create a directory with the binary and a README
            mkdir flux-${{ needs.create-release.outputs.version }}
            cp ${{ matrix.artifact_name }} flux-${{ needs.create-release.outputs.version }}/
            echo "Flux ${{ needs.create-release.outputs.version }} for Windows" > flux-${{ needs.create-release.outputs.version }}/README.txt
            echo "" >> flux-${{ needs.create-release.outputs.version }}/README.txt
            echo "To install:" >> flux-${{ needs.create-release.outputs.version }}/README.txt
            echo "1. Copy flux.exe to a directory in your PATH" >> flux-${{ needs.create-release.outputs.version }}/README.txt
            echo "2. Run 'flux --version' to verify installation" >> flux-${{ needs.create-release.outputs.version }}/README.txt
            7z a ../../../${{ matrix.asset_name }}.zip flux-${{ needs.create-release.outputs.version }}/*
          else
            # Create tarball with just the binary (following Unix convention)
            tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi
          cd -
          
      - name: Generate checksums
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            sha256sum ${{ matrix.asset_name }}.zip > ${{ matrix.asset_name }}.zip.sha256
          else
            sha256sum ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
          fi

      - name: Upload Release Asset (tar.gz)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (zip)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip
          
      - name: Upload Checksum (tar.gz)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz.sha256
          asset_name: ${{ matrix.asset_name }}.tar.gz.sha256
          asset_content_type: text/plain
          
      - name: Upload Checksum (zip)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.zip.sha256
          asset_name: ${{ matrix.asset_name }}.zip.sha256
          asset_content_type: text/plain

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build-release
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish flux-lib
        run: |
          cd flux-lib
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
        continue-on-error: true

      - name: Wait for crates.io to index
        run: sleep 30

      - name: Publish flux-cli
        run: |
          cd flux-cli
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
        continue-on-error: true